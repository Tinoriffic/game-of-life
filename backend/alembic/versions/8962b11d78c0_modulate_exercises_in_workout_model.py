"""modulate exercises in workout model

Revision ID: 8962b11d78c0
Revises: 7b5f44a6e77c
Create Date: 2024-09-30 22:07:35.801147

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8962b11d78c0'
down_revision: Union[str, None] = '7b5f44a6e77c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute("DROP VIEW IF EXISTS workout_progress_view")
    op.execute("DROP VIEW user_workout_program_details;")
    
       # Drop all related tables
    op.execute("DROP TABLE IF EXISTS exercise_sets CASCADE")
    op.execute("DROP TABLE IF EXISTS workout_session_exercises CASCADE")
    op.execute("DROP TABLE IF EXISTS session_exercises CASCADE")
    op.execute("DROP TABLE IF EXISTS workout_program_exercises CASCADE")
    op.execute("DROP TABLE IF EXISTS program_exercises CASCADE")
    op.execute("DROP TABLE IF EXISTS exercises CASCADE")
    op.execute("DROP TABLE IF EXISTS exercise_categories CASCADE")
    op.execute("DROP TABLE IF EXISTS exercise_muscle_groups CASCADE")
    op.execute("DROP TABLE IF EXISTS exercise_difficulty_levels CASCADE")
    op.execute("DROP TABLE IF EXISTS exercise_equipment CASCADE")
    op.execute("DROP TABLE IF EXISTS exercise_types CASCADE")

    # Create new tables
    op.create_table('exercise_categories',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    op.create_table('exercise_muscle_groups',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    op.create_table('exercise_equipment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    op.create_table('exercise_difficulty_levels',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('level', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('level')
    )

    op.create_table('exercise_types',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('type')
    )

    op.create_table('exercises',
        sa.Column('exercise_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('instructions', sa.Text(), nullable=True),
        sa.Column('media_url', sa.String(), nullable=True),
        sa.Column('primary_muscles', sa.String(), nullable=True),
        sa.Column('secondary_muscles', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('category_id', sa.Integer(), nullable=False),
        sa.Column('muscle_group_id', sa.Integer(), nullable=False),
        sa.Column('equipment_id', sa.Integer(), nullable=False),
        sa.Column('difficulty_level_id', sa.Integer(), nullable=False),
        sa.Column('exercise_type_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['category_id'], ['exercise_categories.id'], ),
        sa.ForeignKeyConstraint(['muscle_group_id'], ['exercise_muscle_groups.id'], ),
        sa.ForeignKeyConstraint(['equipment_id'], ['exercise_equipment.id'], ),
        sa.ForeignKeyConstraint(['difficulty_level_id'], ['exercise_difficulty_levels.id'], ),
        sa.ForeignKeyConstraint(['exercise_type_id'], ['exercise_types.id'], ),
        sa.PrimaryKeyConstraint('exercise_id')
    )
    op.create_index(op.f('ix_exercises_name'), 'exercises', ['name'], unique=True)

    # Add columns to workout_programs table
    op.add_column('workout_programs', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('workout_programs', sa.Column('updated_at', sa.DateTime(), nullable=True))
  
    # ### end Alembic commands ###
    


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('workout_programs', 'updated_at')
    op.drop_column('workout_programs', 'created_at')
    op.drop_constraint(None, 'exercises', type_='foreignkey')
    op.drop_constraint(None, 'exercises', type_='foreignkey')
    op.drop_constraint(None, 'exercises', type_='foreignkey')
    op.drop_constraint(None, 'exercises', type_='foreignkey')
    op.drop_constraint(None, 'exercises', type_='foreignkey')
    op.drop_index(op.f('ix_exercises_name'), table_name='exercises')
    op.drop_column('exercises', 'exercise_type_id')
    op.drop_column('exercises', 'difficulty_level_id')
    op.drop_column('exercises', 'equipment_id')
    op.drop_column('exercises', 'muscle_group_id')
    op.drop_column('exercises', 'category_id')
    op.drop_column('exercises', 'updated_at')
    op.drop_column('exercises', 'created_at')
    op.drop_column('exercises', 'secondary_muscles')
    op.drop_column('exercises', 'primary_muscles')
    op.drop_column('exercises', 'media_url')
    op.drop_column('exercises', 'instructions')
    op.drop_column('exercises', 'description')
    op.create_table('workout_program_exercises',
    sa.Column('program_exercise_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sets', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recommended_reps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recommended_weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['day_id'], ['workout_days.day_id'], name='workout_program_exercises_day_id_fkey'),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.exercise_id'], name='workout_program_exercises_exercise_id_fkey'),
    sa.PrimaryKeyConstraint('program_exercise_id', name='workout_program_exercises_pkey')
    )
    op.create_index('ix_workout_program_exercises_program_exercise_id', 'workout_program_exercises', ['program_exercise_id'], unique=False)
    op.create_table('workout_session_exercises',
    sa.Column('session_exercise_id', sa.INTEGER(), server_default=sa.text("nextval('workout_session_exercises_session_exercise_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.exercise_id'], name='workout_session_exercises_exercise_id_fkey'),
    sa.ForeignKeyConstraint(['session_id'], ['workout_sessions.session_id'], name='workout_session_exercises_session_id_fkey'),
    sa.PrimaryKeyConstraint('session_exercise_id', name='workout_session_exercises_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_workout_session_exercises_session_exercise_id', 'workout_session_exercises', ['session_exercise_id'], unique=False)
    op.create_table('exercise_sets',
    sa.Column('set_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_exercise_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('set_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_exercise_id'], ['workout_session_exercises.session_exercise_id'], name='exercise_sets_session_exercise_id_fkey'),
    sa.PrimaryKeyConstraint('set_id', name='exercise_sets_pkey')
    )
    op.create_index('ix_exercise_sets_set_id', 'exercise_sets', ['set_id'], unique=False)

    op.execute("""
    CREATE VIEW workout_progress_view AS
    SELECT 
        ws.user_id,
        ws.session_id,
        ws.program_id,
        wp.name AS program_name,
        ws.session_date,
        wse.session_exercise_id,
        wse.exercise_id,
        e.name AS exercise_name,
        es.set_number,
        es.weight,
        es.reps,
        (es.weight * es.reps) AS set_volume,
        wse.total_volume AS exercise_total_volume
    FROM 
        workout_sessions ws
    JOIN 
        workout_programs wp ON ws.program_id = wp.program_id
    JOIN 
        workout_session_exercises wse ON ws.session_id = wse.session_id
    JOIN 
        exercises e ON wse.exercise_id = e.exercise_id
    JOIN 
        exercise_sets es ON wse.session_exercise_id = es.session_exercise_id
    ORDER BY 
        ws.session_date DESC, wse.session_exercise_id, es.set_number
    """)

    op.execute("""
        CREATE VIEW user_workout_program_details AS
        SELECT 
            u.id AS user_id,
            wp.program_id,
            wp.name AS program_name,
            wd.day_id,
            wd.day_name,
            e.exercise_id,
            e.name AS exercise_name,
            wpe.program_exercise_id,
            wpe.sets,
            wpe.recommended_reps,
            wpe.recommended_weight
        FROM users u
        JOIN workout_programs wp ON u.id = wp.user_id
        JOIN workout_days wd ON wp.program_id = wd.program_id
        JOIN workout_program_exercises wpe ON wd.day_id = wpe.day_id
        JOIN exercises e ON wpe.exercise_id = e.exercise_id;
    """)
    # ### end Alembic commands ###
